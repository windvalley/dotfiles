# zshrc by @windvalley
# https://raw.githubusercontent.com/windvalley/dotfiles/master/zsh/zshrc


# vim: set foldmarker={{,}} foldlevel=0 foldmethod=marker:
#
# NOTE:
#   查看折叠内容的方法:
#      za: normal 模式下按 za, 表示当光标在关闭折叠上时打开之, 在打开折叠上时关闭之;
#          在打开的折叠内部任意处按 za, 也会关闭折叠.
#      zA: 是 za 的递归操作, 是针对嵌套折叠的场景.


# --- 安装步骤 {{

#   1. 安装 ohmyzsh
#      doc: https://github.com/ohmyzsh/ohmyzsh
#      sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#      官方主题所在目录: ~/.oh-my-zsh/themes
#      官方插件所在目录: ~/.oh-my-zsh/plugins
#      第三方主题所在目录: ~/.oh-my-zsh/custom/themes
#      第三方插件所在目录: ~/.oh-my-zsh/custom/plugins
#
#   2. 常用第三方插件安装
#      doc: https://github.com/unixorn/awesome-zsh-plugins
#      1) 自动补全插件:
#         git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
#      2) 语法高亮插件:
#         git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
#
#   3. 使用本 zshrc 文件
#      curl -sfLo ~/.zshrc https://raw.githubusercontent.com/dot-neovim/master/zsh/zshrc

# }}


# --- 主题配置 {{

# 除了这里默认配置的 powerlevel10k 主题, 还可以使用一些简洁的主题,
# 比如: ys, robbyrussell, amuse, agnoster, random
# doc: https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# NOTE: 如果手动安装powerlevel10k主题，需要注释此行。
# ZSH_THEME="powerlevel10k/powerlevel10k"


# git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.powerlevel10k
source ~/.powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# }}


# --- 基础配置 {{

# 解决 source ~/.zshrc 和 ~/.tmux.conf 中 set-environment -g PATH 导致的 PATH 变量值重复的问题.
# $PATH 值的来源:
#   1) /etc/paths
#   2) /etc/paths.d/*
#   3) ~/.zshrc
#   4) ~/.zshenv
#   5) ~/.tmux.conf 中的 set-environment -g PATH ""
typeset -U PATH

# oh-my-zsh 安装路径.
# NOTE:
#   $ZSH/cache/completions 路径默认在 $FPATH 中, 以后有新命令的补全文件可以放在此路径下, 比如:
#     gopass completion zsh > $ZSH/cache/completions/_gopass
#     exec zsh 或 omz reload
export ZSH="$HOME/.oh-my-zsh"

# 为 zsh 定制的内容的放置目录.
export ZSH_CUSTOM="$ZSH/custom"

# 标准插件存放在: $ZSH/plugins/
# 定制插件存放在: $ZSH_CUSTOM/plugins/
# NOTE:
# 1) 光标移到下面的 README.md 文件, 按 gf 可以打开帮助文件, 按 ctrl o 返回到当前文件.
#   vi-mode:  ~/.oh-my-zsh/plugins/vi-mode/README.md
#   tmux:  ~/.oh-my-zsh/plugins/tmux/README.md
#   git:  ~/.oh-my-zsh/plugins/git/README.md
#   gitignore: ~/.oh-my-zsh/plugins/gitignore/README.md
#   history: ~/.oh-my-zsh/plugins/history/README.md
#   brew:  ~/.oh-my-zsh/plugins/brew/README.md
#   extract:  ~/.oh-my-zsh/plugins/extract/README.md
#   web-search: ~/.oh-my-zsh/plugins/web-search/README.md
#   emoji: ~/.oh-my-zsh/plugins/emoji/README.md
#   colorize: ~/.oh-my-zsh/plugins/colorize/README.md
#   colored-man-pages: ~/.oh-my-zsh/plugins/colored-man-pages/README.md
#   zsh_reload: ~/.oh-my-zsh/plugins/zsh_reload/README.md
#   sudo: ~/.oh-my-zsh/plugins/sudo/README.md
#   timer: ~/.oh-my-zsh/plugins/timer/README.md
#   themes: ~/.oh-my-zsh/plugins/themes/README.md
#   urltools: ~/.oh-my-zsh/plugins/urltools/README.md
#   copyfile: ~/.oh-my-zsh/plugins/copyfile/README.md
#   copypath: ~/.oh-my-zsh/plugins/copypath/README.md
#   aliases: ~/.oh-my-zsh/plugins/aliases/README.md
# 2) 启用的插件, 会将插件目录加入到环境变量 $FPATH 中.
plugins=(
    vi-mode
    tmux
    git
    gitignore
    z
    history
    brew
    extract
    web-search
    emoji
    zsh-autosuggestions
    zsh-syntax-highlighting
    colorize
    colored-man-pages
    sudo
    themes
    urltools
    copyfile
    copypath
    aliases
)


# 解决粘贴较长的内容到终端命令行时速度太慢的问题.
# NOTE:
#   1) 此配置必须放到 source $ZSH/oh-my-zsh.sh 之前.
#   2) 第一次配置之后, 如果想使当前 shell 立即生效, 可执行: exec zsh
DISABLE_MAGIC_FUNCTIONS=true

source $ZSH/oh-my-zsh.sh

# 设置系统默认语言, 避免终端出现中文乱码.
export LANG=en_US.UTF-8

# 专门用来解决 ranger.vim 乱码的问题.
export LC_ALL=en_US.UTF-8

# 默认的编辑器, git、crontab 等会默认使用.
export EDITOR=nvim

# 私有配置单独存放的文件.
source $HOME/.zshrc_private

# }}


# --- 代理配置 {{

# 为终端设置使用 V2ray 提供的代理的快捷命令.
# NOTE:
#   1. 代理地址可通过点击V2ray的菜单「复制终端代理命令」获取；
#   2. 每个终端标签页想使用代理, 都需要先执行 proxy, 然后 curl google.com 进行测试;
#   3. 关闭当前标签页的代理, 使用 unproxy 命令.
alias proxy="export ALL_PROXY=socks5://127.0.0.1:1080;
gsed -i '/^Host github.com/{s/^/#/;n;s/^/#/}' ~/.ssh/config"
alias unproxy="unset ALL_PROXY;
gsed -i '/^#Host github.com/{s/^#//;n;s/^#//}' ~/.ssh/config"

# brew 资源镜像配置, 使用代理的时候不使用此资源镜像.
[[ -z "$ALL_PROXY" ]] &&
export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles ||
export HOMEBREW_BOTTLE_DOMAIN=

# }}


# --- 编程语言 {{

# ****** Go ******
# 通过goenv管理Go版本:
#
# 首先卸载掉已经安装的Go版本（如果有）：brew uninstall --force go
# 安装goenv：brew install goenv
# 查看goenv可安装的Go版本列表：goenv install -l
# 使用goenv安装Go1.21版本：goenv install 1.21
# 使用goenv安装Go1.23版本：goenv install 1.23
# 查看通过goenv安装的Go版本有哪些：goenv versions
# 将系统全局Go版本设置为1.21: goenv global 1.21
# 将当前项目的Go版本设置为1.23, 在项目根目录下执行: goenv local 1.23
eval "$(goenv init -)"

# 安装 protobuf 的编译器 protoc:
#   brew install protobuf
# 安装 protoc 需要的 Go 语言代码转换工具 protoc-gen-go:
#   brew install protoc-gen-go

# ****** Python ******
#
# 使用pyenv管理Python版本
# brew install pyenv
# 安装python3.13版本：pyenv install 3.13
# 查看当前已经安装的python版本有哪些：pyenv versions
# 设置系统全局的python版本为3.13: pyenv global 3.13
# 设置当前目录环境的python版本为3.9: pyenv local 3.9
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"

# 使用poetry管理python虚拟环境
# 1) Install:
#    curl -sSL https://install.python-poetry.org | python3 -
# 2) Uninstall:
#    curl -sSL https://install.python-poetry.org | python3 - --uninstall
# 3) Update:
#    poetry self update
# 4) Enable tab completion:
#    poetry completions zsh > $(brew --prefix)/share/zsh/site-functions/_poetry
#    poetry help completions
#    exec zsh
export PATH="/Users/xg/.local/bin:$PATH"

# ****** Lua ******
# brew install lua@5.3

# lua 指定使用 5.3 版本.
ln -sf /usr/local/Cellar/lua@5.3/5.3.6/bin/lua /usr/local/bin/lua &>/dev/null

# luarocks 指定使用 lua 的 5.3 版本.
alias luarocks="luarocks  --lua-dir=/usr/local/opt/lua@5.3"

export PATH=$HOME/.luarocks/bin:$PATH

# ****** node ******
# node版本管理器: nvm
#
# brew install nvm      # https://github.com/nvm-sh/nvm
#
# nvm install 16        # 安装node@16
# nvm use 16            # 切换到node@16
# nvm alias default 16  # 设置默认版本
# nvm list              # 查看已安装的所有版本
# nvm uninstall 16      # 卸载node@16
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && \. "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/usr/local/opt/nvm/etc/bash_completion.d/nvm"

# ****** ruby ******
# brew install ruby

export PATH="/usr/local/opt/ruby/bin:$PATH"

# ****** java ******
# brew install java
# brew install openjdk@17

export PATH="/usr/local/opt/openjdk@17/bin:$PATH"
export CPPFLAGS="-I/usr/local/opt/openjdk@17/include"

# ****** bash ******
# brew install bash

export PATH="/usr/local/opt/bash/bin:$PATH"

# }}


# --- alias 配置 {{

alias vi="nvim"
alias cp='cp -i'
alias mv='mv -i'

# brew install eza
alias ll="eza -l -g --icons --git"

# *** dotfiles 项目可执行文件

# 将 bin 目录加入到 PATH.
export PATH="$HOME/.dotfiles/zsh/bin:$PATH"

# Vim/Neovim & Alacritty 主题相关命令
alias cs=colorscheme
alias ft=font
alias o=opacity
alias fs=font-size
alias c=colors-print
alias hex=print-256-hex-colors
alias icons=print-icons

# 调节系统音量
alias vol=audio-volume

# 便捷批量 ssh 连接或恢复连接远程服务器
alias s=ssh-sessions

# *** 快速打开 dotfiles 的几种主要配置文件

alias zrc='nvim ~/.dotfiles/zsh/zshrc'
alias tconf='nvim ~/.dotfiles/tmux/tmux.conf'
alias aconf='nvim ~/.dotfiles/alacritty/alacritty.toml'

# *** 快速切换到常用的目录

alias d="cd ~/Documents"
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias gitlab="cd ~/gitlab"

# *** 其他

# 列出正在监听的tcp连接.
alias lsof_tcp="lsof -aP -i TCP -s TCP:LISTEN"

# brew install jesseduffield/lazygit/lazygit
# doc: https://github.com/jesseduffield/lazygit
alias lg=lazygit

# 用来统计某个用户提交的代码行数信息. i.e. $ gs someusername
alias gs="git log --numstat --author"

# For GoFrame Cli: gf
# NOTE: 设置此alias的意义在于覆盖git插件提供的alias gf="git fetch",
# 从而使能正常使用GoFrame的gf命令.
alias gf=gf

# }}


# --- 其他配置 {{

# 用于 git commit 的签名.
export GPG_TTY=$(tty)

# *** fzf (https://github.com/junegunn/fzf)
# brew install fzf
# $(brew --prefix)/opt/fzf/install
export FZF_DEFAULT_OPTS='--height 60% --layout=reverse --border'
alias ff="vim \$(fzf)"
# Useful key bindings and fuzzy completion.
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Enable shell completion.
autoload -U compinit; compinit

# 当在命令行中输入无法匹配的文件名时，shell 不会生成任何错误消息，而只是将该字符串作为参数传递给命令.
setopt no_nomatch

# }}


# --- 使用技巧 {{

#                 ctrl f  输入任意命令行的一部分时, 如果自动出现补全提示,
#                         使用此快捷键自动采纳提示的补全信息.
#                         NOTE: 如果使用了 vi-mode 插件, 此快捷键将失效, 请使用 ctrl e 替代.
#                    tab  命令行输入一部分后按 tab 键触发补全提示或在提示项中选择.
#                 ctrl g  取消选择 tab 选择的补全提示项, 回到命令行本身.
#                      z  z 后输入你要切换的目标目录的一部分, 回车即可自动跳转到目标目录.
#    omz reload/exec zsh  重新加载 ~/.zshrc 配置文件.
#
# *** vi-mode 插件 (~/.oh-my-zsh/plugins/vi-mode/README.md)
#                 ctrl e  编辑模式下将光标移动到行尾, 如果命令行有提示的补全, 则会有补全效果,
#                         替代不使用 vi-mode 插件时的 ctrl f 快捷键.
#                    ESC  使命令行进入 vim 的 normal 模式, 光标移动/文本对象编辑与 vim 一致.
#                     vv  将命令行文本放到 vim 中进行编辑.
#                    j/k  向下或向上翻阅历史命令行.
#                      /  输入关键字搜索历史命令行.
#                      n  翻阅通过 / 搜索的历史命令行.
#
# *** web-search 插件 (~/.oh-my-zsh/plugins/web-search/README.md)
#             google key  打开浏览器使用 google 搜索 key.
#               bing key  打开浏览器使用 bing 搜索 key.
#              baidu key  打开浏览器使用 baidu 搜索 key.
#      stackoverflow key  打开浏览器使用 stackoverflow 搜索 key.
#             github key  打开浏览器使用 github 搜索 key.
#
# *** git 插件 (~/.oh-my-zsh/plugins/git/README.md)
#                    gst  git status
#                    gsh  git show
#                     ga  git add
#                     gc  git commit -v
#                     gp  git push
#                    gpf  git push -f
#                    glo  git log --oneline --decorate
#                   glog  git log --oneline --decorate --graph
#                     gl  git pull
#
# *** gitignore 插件 (~/.oh-my-zsh/plugins/gitignore/README.md)
#                gi list  列出所有支持的编程语言.
#                  gi go  生成 Go 语言的 .gitignore 文件内容.
#
# *** colorize 插件 (~/.oh-my-zsh/plugins/colorize/README.md)
#                   ccat  彩色版的 cat.
#                  cless  彩色版的 less.
#
# *** sudo 插件 (~/.oh-my-zsh/plugins/sudo/README.md)
#                esc esc  连续按两次 esc 将在命令行首自动增加 sudo.
#
# *** themes 插件 (~/.oh-my-zsh/plugins/themes/README.md)
#                lstheme  列出所有已安装的 zsh 主题名称.
#                  theme  随机更换一个主题.
#             theme name  指定切换到某个主题.
#
# *** urltools 插件 (~/.oh-my-zsh/plugins/urltools/README.md)
#        urlencode 'url'  url 编码.
#        urldecode 'url'  url 解码.
#
# *** copyfile 插件 (~/.oh-my-zsh/plugins/copyfile/README.md)
#         copyfile 1.txt  将 1.txt 文件内容拷贝到系统剪贴板.
#
# *** copydir 插件 (~/.oh-my-zsh/plugins/copydir/README.md)
#                copydir  将当前的目录 fullpath 拷贝到系统剪贴板.
#
# *** aliases 插件 (~/.oh-my-zsh/plugins/aliases/README.md)
#                    acs  列出所有 alias 设置.
#                acs key  列出包含 key 的 alias 设置.
#
# *** fzf 工具 (https://github.com/junegunn/fzf)
#                     ff  通过 fzf 搜索文件并用 vim 打开.
#                 ctrl t  列出当前目录下的所有目录和文件,
#                         选择目标文件后回车即可将所选粘贴到命令行上.
#                 meta c  使用 alt/option 键 + c 键, 列出当前目录下的所有子目录,
#                         选择目标目录后回车即可直接进入到目录中.
#                 ctrl r  列出历史命令列表, 输入关键字搜索想要执行的历史命令行.
#               ctrl k/j  从文件列表或命令行列表中上下选择目标.
#               ctrl p/n  同 ctrl j/k.
#      ctrl c/ctrl g/esc  退出文件列表或历史命令列表.
#
# *** 自定义命令
#         colorscheme/cs  切换 vim 和 alacritty 的颜色方案.
#                font/ft  切换 alacritty 终端的字体.
#              opacity/o  调整 alacritty 终端的透明度.
#           font-size/fs  设置 alacritty 终端的字体大小.
#         colors-print/c  打印 256 色的前景色模式和背景色模式.
#                    hex  打印 256 色的 16 进制表示方式.
#                    vol  调整系统音量大小.
#         ssh-sessions/s  便捷的批量 ssh 连接远程服务器.
#               lsof_tcp  查看当前监听的端口信息.
#
# *** 为新命令增加命令补全功能, 将补全脚本放到 $ZSH/cache/completions/ 路径下, 以gopass为例:
#     gopass completion zsh > $ZSH/cache/completions/_gopass
#     exec zsh 或 omz reload
#

# }}
